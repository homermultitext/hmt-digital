/*
  Simple facsimile display of page image + Iliad text.
  Parameters may be either a CTS URN with Iliad line
  to read, a CITE URN with page to read, a pair named
  txt and psg that together form a CTS URN or a pair
  named ms and folio that together form a CITE URN.
 */
import groovy.xml.MarkupBuilder
import edu.harvard.chs.cite.CtsUrn
import edu.harvard.chs.cite.CiteUrn

response.setContentType("text/html")
response.setCharacterEncoding('UTF-8')
response.setHeader( "Access-Control-Allow-Origin", "*")


/**
 * Submits an encoded query to the configured SPARQL endpoint,
 * and returns the reply.
 * @param acceptType MIME type to specify for reply.
 * @param query SPARQL query to submit.
 * @returns SPARQL reply, as a String.
 */
String getSparqlReply(String acceptType, String query) {
  String replyString
  def encodedQuery = URLEncoder.encode(query)
  def q = "@sparqls@query?query=${encodedQuery}"
  if (acceptType == "application/json") {
    q +="&output=json"
  }

  URL queryUrl = new URL(q)
  return queryUrl.getText("UTF-8")

}


String lnQuery(String u) {
return """
SELECT ?cite ?pg ?ln ?seq ?img ?lbl ?nxt ?prv WHERE {
?pg <http://www.homermultitext.org/cite/rdf/hasOnIt> ?cite  .

?pg <http://www.homermultitext.org/cite/rdf/hasOnIt> ?ln .
?ln <http://www.homermultitext.org/cts/rdf/hasSequence> ?seq .
?pg <http://www.homermultitext.org/hmt/rdf/hasDefaultImage> ?img .
?pg <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?lbl .


OPTIONAL {
?pg <http://purl.org/ontology/olo/core#next>  ?nxt .
}

OPTIONAL {
?pg <http://purl.org/ontology/olo/core#previous>  ?prv .
}
FILTER (str(?cite) = "${u}")
}
ORDER BY (?seq)
"""
}

String pgQuery(String u) {
return """
SELECT ?lnlab ?ln ?seq ?pg ?lbl ?img  ?nxt ?prv WHERE {
?pg <http://www.homermultitext.org/dse/rdf/hasDefaultImage> ?img .
?pg <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?lbl .

OPTIONAL {


?pg <http://www.homermultitext.org/dse/rdf/hasOnIt> ?ln .
?ln <http://www.homermultitext.org/cts/rdf/hasSequence> ?seq .
?ln <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?lnlab .
}

OPTIONAL {
?pg <http://purl.org/ontology/olo/core#next>  ?nxt .
}

OPTIONAL {
?pg <http://purl.org/ontology/olo/core#previous>  ?prv .
}

FILTER (str(?pg) = "${u}")
}
ORDER BY ?seq
"""
}



String errorReport(String s, java.lang.Exception ex) {
  def writer = new StringWriter()
  def xml = new MarkupBuilder(writer)

  xml.html() {
    head {
      title("@projectlabel@: facsimile browser")
      link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
      link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
      script(type: "text/javascript", src : "js/jquery.min.js", "  ")
      script(type: "text/javascript", src : "@citekit@", "  ")
    } 
    body {
      header(role: "banner") {
	mkp.yield ("Digital services from the Homer Multitext project")
	nav(role: "navigation") {
	  ul {
	    li {
	      mkp.yield("HMT: ")
	      a(href: "http://www.homermultitext.org", "home")
	    }
	    li {
	      mkp.yield("HMT Digital: ")
	      a(href: "home", "home")
	    }
	    li {
	      a(href: "mss", "browse MSS")
	    }
	    li {
	      a(href: "scholia", "scholia")
	    }
	  }
	}
      }

      article {
	if ((s != null) && (s.size() > 0)) {
	  h2("Error")
	  p  {
	    mkp.yield "Not a valid URN parameter: "
	    strong(s)
	  }
	  p("${ex}")
	}

	h2("Browse manuscripts")
	h3("Start from MS page")
	form (action : "facs", method : "get") {
	  label(for: "pgurn","Page")
	  input (type : "text", name : "urn", value : "@demoObject@", size: "60", id : "pgurn")
	  input (type : "submit", value : "See facsimile")
	}

	h3 {
	  mkp.yield ("Start from ")
	  em("Iliad")
	  mkp.yield (" line")
	}

	p {
	  mkp.yield("Find manuscript pages for ")
	  em("Iliad")
	  mkp.yield(" reference (book.line):")

	  form (action : "iliad", method : "get") {
	    label(for: "ref","book.line")
	    input (type : "text", name : "ref", value : "1.1", size: "10", id : "ref")
	    input (type : "submit", value : "See occurrences")
	  }    
	}
      }      
      footer("@htmlfooter@")
    }
  }
  return writer.toString()
}

boolean done = false
CtsUrn iliadUrn = null
CiteUrn pgUrn = null
String queryString

String urnStr = request.getParameter("urn")


boolean foundUrn = false
try {
  iliadUrn = new CtsUrn(urnStr)
  queryString = lnQuery(urnStr)
  foundUrn = true
} catch (Exception e) {
}

try {
  pgUrn = new CiteUrn(urnStr)
  queryString = pgQuery(urnStr)
  foundUrn = true
} catch (Exception e) {
}


if (!foundUrn) {
  try {
    String urnCombo = request.getParameter("txt") + ":" + request.getParameter("psg")
    iliadUrn = new CtsUrn(urnCombo)
    queryString = lnQuery(urnCombo)
    foundUrn = true
  } catch (Exception e) {
    //println errorReport(urnCombo, new Exception("Failed on combo urn."))
    //done = true
  }

}


if (!foundUrn) {
  try {
    String urnCombo = request.getParameter("ms") + "." + request.getParameter("folio")
    pgUrn = new CiteUrn(urnCombo)
    queryString = pgQuery(urnCombo)
    foundUrn = true
  } catch (Exception e) {
    //System.err.println "Tried urn combo and failed"
    //println errorReport(urnCombo, new Exception("Failed on combo urn for folio page."))
    //done = true
  }
}


if (!foundUrn) {
  println errorReport(urnStr, new Exception("Please include a parameter named 'urn' with either a valid reference to a line of the Iliad or to a manuscript page."))
  done = true
} 

if (!done) {
  String msg
  if (iliadUrn) {
    msg = "search by text ${iliadUrn}"
  } else {
    msg = "search by folio ${pgUrn}"
  }

  def slurper = new groovy.json.JsonSlurper()
  def jsonData =  slurper.parseText(getSparqlReply("application/json", queryString))


  
 System.err.println "\n\nfacs: query for \n" 
 System.err.println "${queryString}\n\n"
  
  
  String pgLabel
  String imgUrn
  String nxtPg = ""
  String prevPg = ""
  def iliadLines = []
  jsonData.results.bindings.each { b ->
    imgUrn = b.img.value
    pgLabel = b.lbl.value
    if (b.nxt) {
      nxtPg = b.nxt.value
    }
    if (b.prv) {
      prevPg = b.prv.value
    }
    if ((b.ln) && (b.ln.value ==~ /urn:cts:greekLit:tlg0012.+/)) {
      iliadLines.add(b.ln.value)
    }
  }
  

  if (imgUrn == null) {
    println errorReport(urnStr, new Exception("No facsimile found for ${urnStr}"))
  } else {
  

    html.html {
    head {
      title("@projectlabel@: facsimile reader")
      link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
      link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
      script(type: "text/javascript", src : "js/jquery.min.js", "  ")
      script(type: "text/javascript", src : "@citekit@", "  ")
    }

    body {
    header(role: "banner") {
      mkp.yield ("Digital services from the Homer Multitext project")
      nav(role: "navigation") {
	  ul {
	    li {
	      mkp.yield("HMT: ")
	      a(href: "http://www.homermultitext.org", "home")
	    }
	    li {
	      mkp.yield("HMT Digital: ")
	      a(href: "home", "home")
	    }
	    li {
	      a(href: "mss", "browse MSS")
	    }
	    li {
	      a(href: "scholia", "scholia")
	    }
	    li {
	      mkp.yield "browse MS: "

	      if (prevPg != "") {
		a(href: "facs?urn=${prevPg}", "previous page")
	      } else {
		mkp.yield " previous page"
	      }
	    }
	    li {
	      if (nxtPg != "") {
		a(href: "facs?urn=${nxtPg}", "next page")
	      } else {
		mkp.yield "next page"
	      }
	    }
	  }
	}
      }
      String warn = "(Image linked to view zoomable up to full resolution.)"
      article {
	  
	if (iliadLines.size() >= 1) {


	    h2("${pgLabel}")
	    CtsUrn firstLine = new CtsUrn(iliadLines[0])
	    CtsUrn lastLine = new CtsUrn(iliadLines[iliadLines.size() - 1])
	    p {
	      em("Iliad")
	      mkp.yield "${firstLine.getPassageComponent()}-${lastLine.getPassageComponent()}"
	    }
	    String rng = "${firstLine}-${lastLine.getPassageComponent()}"
	    p("\n\nin citekit compare, use ${rng} with text source @texts@\n\n")
	    System.err.println ("\n\nin citekit compare, use ${rng} with text source @texts@\n\n")

	    
	    p(warn)
	    div (class: "citekit-compare") {
	      blockquote(class: "cite-image", cite : "${imgUrn}", "${imgUrn}")
	      blockquote(class: "cite-text", cite : "${rng}", "${rng}")
	    }
	    
	  } else {
	  p(warn)
	  blockquote(class: "cite-image", cite : "${imgUrn}", "${imgUrn}")
	}

      }
      

      // citekit magic:
      ul (id: "citekit-sources") {
	li (class : "citekit-source cite-text citekit-default", id : "defaulttext", "@texts@") 
	li (class : "citekit-source cite-image citekit-default", id : "defaultimage", "data-image-w" : "@ckImgSize@",  "@images@" )
	li (class : "citekit-source cite-collection citekit-default", id : "defaultcollection", "@collections@" )
      }
	}

    footer("@htmlfooter@")
    }
  }
}


