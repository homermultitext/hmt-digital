/*

*/
import groovyx.net.http.*
import groovyx.net.http.HttpResponseException
import static groovyx.net.http.ContentType.*
import static groovyx.net.http.Method.*


import edu.harvard.chs.cite.CtsUrn




boolean error = false




/**
 * Submits an encoded query to the configured SPARQL endpoint,
 * and returns the reply.
 * @param acceptType MIME type to specify for reply.
 * @param query SPARQL query to submit.
 * @returns SPARQL reply, as a String.
 */
String getSparqlReply(String acceptType, String query) {
  String replyString
  def encodedQuery = URLEncoder.encode(query)
  def q = "@sparqls@query?query=${encodedQuery}"
  if (acceptType == "application/json") {
    q +="&output=json"
  }

  def http = new HTTPBuilder(q)
  http.request( Method.GET, ContentType.TEXT ) { req ->
    headers.Accept = acceptType
    response.success = { resp, reader ->
      replyString = reader.text
    }
  }
  return replyString
}



String iliadIndexQuery(String ref) {
return """
select ?folio ?ln ?lbl  where {

?folio  <http://www.homermultitext.org/cite/rdf/hasOnIt> ?ln .
?folio <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?lbl .
 FILTER (regex(str(?ln), "^urn:cts:greekLit:tlg0012.tlg001.+:${ref}\$" ) ) .
} 
order by ?ln
"""
}





CtsUrn iliadUrn
String ref = request.getParameter("ref")
try {
  iliadUrn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001:${ref}")
} catch (Exception e) {
  error = true
}

if (error) {
  response.setContentType("text/plain")
  println "Please include a parameter named 'urn' with either a valid reference to a line of the Iliad or to a manuscript page."

} else {
  response.setContentType("text/html")
  response.setCharacterEncoding('UTF-8')
  response.setHeader( "Access-Control-Allow-Origin", "*")

  def slurper = new groovy.json.JsonSlurper()
  String queryString = iliadIndexQuery("${ref}")
  def jsonData =  slurper.parseText(getSparqlReply("application/json", queryString))

  html.html {
    head {
      title("@projectlabel@: index to Iliad")
      link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
      link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
      script(type: "text/javascript", src : "js/jquery.min.js", "  ")
      script(type: "text/javascript", src : "@citekit@", "  ")
    }
  
    body {
      header {
	nav {
	  mkp.yield "@projectlabel@: "
	  a(href : '@homeUrl@', "Home")
	}
      }

      h2 {
	mkp.yield "Index to "
	em("Iliad")
      }

      pre(queryString)
      p {
	em("Iliad")
	mkp.yield " ${ref} occurs in:"
      }
      ul {
	jsonData.results.bindings.each { b ->
	  
	  li {
	    a(href: "facs?urn=${b.folio.value}", "${b.lbl.value}")
	    }
	}
      }

    }
  }
}