/*  Query indexing of Iliad lines to occurrences in MSS.
*/

import groovy.xml.MarkupBuilder
import edu.harvard.chs.cite.CtsUrn

response.setContentType("text/html")
response.setCharacterEncoding('UTF-8')
response.setHeader( "Access-Control-Allow-Origin", "*")


/**
 * Submits an encoded query to the configured SPARQL endpoint,
 * and returns the reply.
 * @param acceptType MIME type to specify for reply.
 * @param query SPARQL query to submit.
 * @returns SPARQL reply, as a String.
 */
String getSparqlReply(String acceptType, String query) {
  String replyString
  def encodedQuery = URLEncoder.encode(query)
  def q = "@sparqls@query?query=${encodedQuery}"
  if (acceptType == "application/json") {
    q +="&output=json"
  }
  URL queryUrl = new URL(q)
  return queryUrl.getText("UTF-8")
}



String iliadIndexQuery(String ref) {
return """
select ?folio ?ln ?lbl  where {

?folio  <http://www.homermultitext.org/dse/rdf/hasOnIt> ?ln .
?folio <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?lbl .
 FILTER (regex(str(?ln), "^urn:cts:greekLit:tlg0012.tlg001.+:${ref}\$" ) ) .
} 
order by ?ln
"""
}



String errorReport(String s, java.lang.Exception ex) {
  def writer = new StringWriter()
  def xml = new MarkupBuilder(writer)

  xml.html() {
    head {
      title("@projectlabel@: Index to Iliad")
      link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
      link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
      script(type: "text/javascript", src : "js/jquery.min.js", "  ")
      script(type: "text/javascript", src : "@citekit@", "  ")
    } 
    body {
      header(role: "banner") {
	mkp.yield ("Digital services from the Homer Multitext project")
	nav(role: "navigation") {
	  ul {
	    li {
	      mkp.yield("HMT: ")
	      a(href: "http://www.homermultitext.org", "home")
	    }
	    li {
	      mkp.yield("HMT Digital: ")
	      a(href: "home", "home")
	    }
	    li {
	      a(href: "mss", "browse MSS")
	    }
	    li {
	      a(href: "scholia", "scholia")
	    }
	  }
	}
      }

      article {
	if ((s != null) && (s.size() > 0)) {
	  h2("Error")
	  p  {
	    mkp.yield "Not a valid URN parameter: "
	    strong(s)
	  }
	  p("${ex}")
	}

	h2("Find passage")
	p {
	  form (action : "iliad", method : "get") {
	    label(for: "ref","book.line")
	    input (type : "text", name : "ref", value : "1.1", size: "10", id : "ref")
	    input (type : "submit", value : "See occurrences")
	  }    
	}

      }
      footer("@htmlfooter@")
    }
  }
  return writer.toString()
}




boolean done = false
CtsUrn iliadUrn = null
String ref = request.getParameter("ref")


if ((ref == null) || (ref.size() == 0)) {
  println errorReport(ref, new Exception("No 'ref' parameter supplied."))
  done = true
}


if (!done) {
  try {
    iliadUrn = new CtsUrn("urn:cts:greekLit:tlg0012.tlg001:${ref}")
  } catch (Exception e) {
    println errorReport(ref, e)
    done = true
  }
}

if (!done) {
  def slurper = new groovy.json.JsonSlurper()
  String queryString = iliadIndexQuery("${ref}")
  def jsonData =  slurper.parseText(getSparqlReply("application/json", queryString))

  html.html {
    head {
      title("@projectlabel@: index to Iliad")
      link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
      link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
      script(type: "text/javascript", src : "js/jquery.min.js", "  ")
      script(type: "text/javascript", src : "@citekit@", "  ")
    }
  
    body {
      header(role: "banner") {
	mkp.yield ("Digital services from the Homer Multitext project")
	nav(role: "navigation") {
	  ul {
	    li {
	      mkp.yield("HMT: ")
	      a(href: "http://www.homermultitext.org", "home")
	    }
	    li {
	      mkp.yield("HMT Digital: ")
	      a(href: "home", "home")
	    }
	    li {
	      a(href: "mss", "browse MSS")
	    }
	    li {
	      a(href: "scholia", "scholia")
	    }
	  }
	}
      }

      h2 {
	mkp.yield "Index to "
	em("Iliad")
      }

      if (jsonData.results.bindings.size() > 0) {
	p {
	  em("Iliad")
	  mkp.yield " ${ref} occurs in:"
	}
	ul {
	  jsonData.results.bindings.each { b ->
	    li {
	      a(href: "facs?urn=${b.folio.value}", "${b.lbl.value}")
	    }
	  }
	}
      } else {
	p {
	  mkp.yield "No occurrences of "
	  em("Iliad")
	  mkp.yield " ${ref} indexed to manuscripts."
	}
      }
      footer("@htmlfooter@")
    }
  }
}