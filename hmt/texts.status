
// rdf prefixes:
String prefix = "prefix cts: <http://www.homermultitext.org/cts/rdf/>\nprefix cite: <http://www.homermultitext.org/cite/rdf/>\nprefix hmt: <http://www.homermultitext.org/hmt/rdf/>\nprefix citedata: <http://www.homermultitext.org/hmt/citedata/>\nprefix dcterms: <http://purl.org/dc/terms/>\nprefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>\nprefix  xsd: <http://www.w3.org/2001/XMLSchema#>\nprefix olo: <http://purl.org/ontology/olo/core#>"


String getSparqlReply(String acceptType, String query) {
  String replyString
  def encodedQuery = URLEncoder.encode(query)
  def q = "@sparqls@query?query=${encodedQuery}"
  if (acceptType == "application/json") {
    q +="&output=json"
  }

  URL queryUrl = new URL(q)
  return queryUrl.getText("UTF-8")

}



/* Labelled counts of CITE Image Collections */
String imageCounts = """
${prefix}
select ?coll ?label (count(?obj) AS ?num) where {
    ?coll rdf:type cite:ImageArchive  .
    ?coll rdf:label ?label .
    ?obj cite:belongsTo ?coll .
   
}
GROUP BY ?coll ?label
ORDER BY desc(count(?obj))
"""


/*Edited texts */
String editions = """
${prefix}
select ?label ?ed where {
    ?ed rdf:type cts:Edition  .
    ?ed rdf:label ?label .
}
"""



String browsableQuery = """
SELECT ?century ?pgmodel ?label (count(?folio) AS ?cnt )  WHERE {
   ?codex <http://www.homermultitext.org/hmt/citedata/codices_pageModel>  ?pgmodel .
   ?codex <http://www.homermultitext.org/hmt/citedata/codices_century>  ?century  . 
   ?codex <http://www.w3.org/1999/02/22-rdf-syntax-ns#label> ?label .
   ?pgmodel <http://www.homermultitext.org/cite/rdf/possesses>  ?folio .
   ?folio  <http://purl.org/ontology/olo/core#item>  ?seq .

}
GROUP BY  ?century ?pgmodel ?label
ORDER BY ?century ?pgmodel
"""






html.html {
  head {
    title("@projectlabel@: status of work")
    link(type : "text/css", rel : "stylesheet", href : "css/browsers.css", title : "CSS stylesheet")
    link(type : "text/css", rel : "stylesheet", href : "@coreCss@", title : "CSS stylesheet")
    script(type: "text/javascript", src : "js/jquery.min.js", "  ")
    script(type: "text/javascript", src : "@citekit@", "  ")
  }
  
  body {

    header(role: "banner") {
      mkp.yield ("Digital services from the Homer Multitext project")
      nav(role: "navigation") {
	ul {
	  li {
	    mkp.yield("HMT: ")
	    a(href: "http://www.homermultitext.org", "home")
	  }
	  li {
	    mkp.yield("HMT Digital: ")
	    a(href: "home", "home")
	  }

	  li {
	    a(href: "mss", "browse MSS")
	  }
	  li {
	    a(href: "scholia", "scholia")
	  }
	}
      }
    }
    article {

      h2 ("Summary of status: editing texts")
      p("by book of Iliad, by lines of ILiad, # scholia, words of Greek")



      h2 ("Summary of status: documenting manuscripts")
      
      h3("Completely edited")

      h3 {
	em("Iliad")
	mkp.yield (" text indexed to browsable model")
      }



      h3("Browsable model of codex")
      def msSlurper = new groovy.json.JsonSlurper()
      def browsables = msSlurper.parseText(getSparqlReply("application/json", browsableQuery))
      String prevCentury = ""
      browsables.results.bindings.each { b ->
	if (b.century?.value != prevCentury) {
	  prevCentury = b.century?.value
	  h4 {
	    strong("${b.century?.value}th century")
	  }
	}
	p { 
	  mkp.yield("${b.label?.value}:  ${b.cnt?.value} pages")
	  form(action: "facs") {
	    input(type: "hidden", name: "ms", value: "${b.pgmodel.value}")
	    input(size: 5, name: "folio", value: "1r")
	    input (type : "submit", value : "browse")
	  }
	}
      }

      

      h3("Images cataloged")
      def slurper = new groovy.json.JsonSlurper()
      def parsedImgs = slurper.parseText(getSparqlReply("application/json", imageCounts))
      boolean hasImages = false

      if ( parsedImgs.results.bindings.size() == 1) {
	parsedImgs.results.bindings.each { b ->
	  if (b.num.value == "0") {
	    mkp.yield("none.")
	  } else {
	    hasImages = true
	  }
	}
      } else {
	hasImages = true
      }
      if (hasImages) {
	parsedImgs.results.bindings.each { b ->
	  p {
	      mkp.yield "${b.label?.value}: ${b.num?.value} images ("
	      a(href : "browseimg?urn=${b.coll?.value}", "see images")
	      mkp.yield(")")
	  }
	}
      }
    }
    footer("@htmlfooter@")
  }
}



